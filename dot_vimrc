set nocompatible

packadd chezmoi.vim

filetype plugin indent on
syntax on
"set termguicolors "low contrast bg, needs adjusting in theme. in term color
"fixed in iterm color config instead
colorscheme nord
"highlight CursorLine term=underline ctermbg=0 guibg=#3B4252
set laststatus=2
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set smartindent
set showmatch
set backspace=indent,eol,start
set incsearch
set hlsearch
set ruler
set ttimeout
set ttimeoutlen=20
set wildmenu
set showbreak=↪\ 
set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨
set formatoptions+=j
set nolangremap
" do NOT overwrite system clipboard when deleting in vim
" set clipboard=unnamedplus,unnamed,autoselect autoselect
set scrolloff=7
set noshowmode
set relativenumber
set cursorline
set foldlevel=99
set autowrite
set updatetime=200
set history=5000

nnoremap <SPACE> <NOP>
let mapleader=" "

nnoremap <leader>h :nohlsearch<CR>
nnoremap <leader>l :set list!<CR>
nnoremap <leader>p :setlocal paste<cr>:normal "+p<cr>:setlocal nopaste<cr>
nnoremap <leader>y "+y
vnoremap <leader>y "+y
"nnoremap <leader>` " TODO: toggle terminal

cmap w!! w !sudo tee > /dev/null %
nnoremap <S-q> vipgq
" TODO: set format function to use `uvx ruff format`
" https://phelipetls.github.io/posts/code-formatting-vim/

nmap <TAB> >>
nmap <S-TAB> <<
imap <S-TAB> <ESC><<i
vmap <TAB> >gv
vmap <S-TAB> <gv

set fillchars+=vert:│
nnoremap <C-w>\| :vsplit<CR>
nnoremap <C-w>- :split<CR>
nnoremap <C-w><C-l> :vertical resize -5<cr>
nnoremap <C-w><C-j> :resize +5<cr>
nnoremap <C-w><C-k> :resize -5<cr>
nnoremap <C-w><C-h> :vertical resize +5<cr>
nnoremap <C-w><C-w> <C-w>p
nnoremap <C-w>w <C-w>p

nnoremap <leader><leader> :b#<CR>
" nnoremap <leader>b :set showtabline=2<CR>
" nnoremap <leader>B :set showtabline=0<CR>
nnoremap <leader>D :bdelete<CR>
" nnoremap <leader>b :buffers<CR>:B<SPACE> 
" nnoremap <leader>bd :bdelete<CR>
" nnoremap <leader>1 :1b<CR>
" nnoremap <leader>2 :2b<CR>
" nnoremap <leader>3 :3b<CR>
" nnoremap <leader>4 :4b<CR>
" nnoremap <leader>5 :5b<CR>
" nnoremap <leader>6 :6b<CR>
" nnoremap <leader>7 :7b<CR>
" nnoremap <leader>8 :8b<CR>
" nnoremap <leader>9 :9b<CR>
" nnoremap <silent><left> :bprevious<CR>
" nnoremap <silent><right> :bnext<CR>

nnoremap <expr><leader>q empty(filter(getwininfo(), 'v:val.quickfix')) ? ':copen<CR>' : ':cclose<CR>'
nnoremap <silent><up> :cprevious<CR>
nnoremap <silent><down> :cnext<CR>
" map <cr> to goto current error outside of qf window
nnoremap <expr> <return> &buftype ==# 'quickfix' ? "\<CR>" : ":cc\<CR>"


" auto save file
autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif
augroup auto_save
  autocmd!
  "autocmd TextChanged,TextChangedI <buffer> call AutoSave()
  autocmd CursorHold <buffer> call AutoSave()
augroup end

" return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" permanent undo
try
  set undodir=~/.vim_runtime/temp_dirs/undodir
  set undofile
catch
endtry

" visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>
" search and replace the selected text
vnoremap <silent><leader>r :call VisualSelection('replace', '')<CR>

nnoremap <silent><leader>gb :call <SID>GitBlameLine()<CR>

" workflow: gyg line in file, paste in notes, use gF to go back to this line
nnoremap <expr> gyg operators#YankGrep({}, '', 1) .. '_'
xnoremap <expr> gyg operators#YankGrep({}, '', 1) .. '_'
nnoremap <expr> gygg operators#YankGrep()
xnoremap <expr> gygg operators#YankGrep()


" filetypes
"au FileType python setlocal smartindent
"au FileType python setlocal textwidth=79 " PEP-8 Friendly
"au FileType python setlocal foldmethod=indent " SimpylFold
"au FileType python setlocal omnifunc=syntaxcomplete#Complete - now in ycm
" in `~/.vim/compiler/python.vim`. there's also multiline errorformat there.
" alternatively, this wrapper catches and prints Exceptions in friendly format
" https://github.com/tonyxty/quickfix.py
au FileType python compiler python
au FileType python setlocal makeprg=make
"au FileType python let b:dispatch = 'uv run %'
au BufEnter *_test.py let b:dispatch = 'uv run py.test %'


" plugins

" surround
" cs"' -> change " to '
" ds' -> delete '
" ys3aw) -> () for 3 words
" yss] -> [] for entire line
" visual then S}
" ( - with space, ) - without space

" TODO: ALE without comments & with qf OR YcmDiags
" TODO: scroll with ^j ^k while keeping cursor in place
" TODO: reformat leader= should be more sensible than = (fails html) (use `ruff` for python?)
" TODO: option "-" (long dash) in input mode causes glitches, at least with ukr layout.
" TODO: use `ruff check` as linter for python

let g:barbaric_scope = 'buffer'
let g:barbaric_default = 'com.apple.keylayout.ABC'

let g:slime_target = "tmux"
let g:slime_bracketed_paste = 1
let g:slime_default_config = {"socket_name": "default", "target_pane": "2"}

set rtp+=/opt/homebrew/opt/fzf
let g:fzf_colors =
\ { 'fg':         ['fg', 'Normal'],
  \ 'bg':         ['bg', 'Normal'],
  \ 'preview-bg': ['bg', 'NormalFloat'],
  \ 'hl':         ['fg', 'Comment'],
  \ 'fg+':        ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':        ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':        ['fg', 'Statement'],
  \ 'info':       ['fg', 'PreProc'],
  \ 'border':     ['fg', 'Ignore'],
  \ 'prompt':     ['fg', 'Conditional'],
  \ 'pointer':    ['fg', 'Exception'],
  \ 'marker':     ['fg', 'Keyword'],
  \ 'spinner':    ['fg', 'Label'],
  \ 'header':     ['fg', 'Comment'] }
if exists('$TMUX')
    let g:fzf_layout = { 'tmux': '80%,70%' }
else
    let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.6 } }
endif
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
nnoremap <leader>f :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>r :RG<CR>
nnoremap <leader>t :Tags<CR>
nnoremap <leader>s :Lines<CR>
nnoremap <leader>C :BCommits<CR>
nnoremap <leader>c :History:<CR>

let g:nord_underline = 1
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'mode_map': {
        \ 'n' : 'N',
        \ 'i' : 'I',
        \ 'R' : 'R',
        \ 'v' : 'V',
        \ 'V' : 'VL',
        \ "\<C-v>": 'VB',
        \ 'c' : 'C',
        \ 's' : 'S',
        \ 'S' : 'SL',
        \ "\<C-s>": 'SB',
        \ 't': 'T',
        \ },
      \ 'active': {
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \            ],
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename' ]
      \           ]
      \ },
      \ 'tabline': {
      \   'left': [ ['buffers'] ],
      \   'right': [ [] ]
      \ },
      \ 'component_expand': {
      \   'buffers': 'lightline#bufferline#buffers'
      \ },
      \ 'component_type': {
      \   'buffers': 'tabsel'
      \ },
      \ }
" let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline#bufferline#auto_hide = 4000
let g:lightline#bufferline#show_number = 2
let g:lightline#bufferline#min_buffer_count = 1
nmap <Leader>1 <Plug>lightline#bufferline#go(1)
nmap <Leader>2 <Plug>lightline#bufferline#go(2)
nmap <Leader>3 <Plug>lightline#bufferline#go(3)
nmap <Leader>4 <Plug>lightline#bufferline#go(4)
nmap <Leader>5 <Plug>lightline#bufferline#go(5)
nmap <Leader>6 <Plug>lightline#bufferline#go(6)
nmap <Leader>7 <Plug>lightline#bufferline#go(7)
nmap <Leader>8 <Plug>lightline#bufferline#go(8)
nmap <Leader>9 <Plug>lightline#bufferline#go(9)
nmap <right>   <Plug>lightline#bufferline#go_next()
nmap <left>    <Plug>lightline#bufferline#go_previous()

let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader>w <Plug>(easymotion-wl)
map <leader>e <Plug>(easymotion-el)
nmap s <Plug>(easymotion-overwin-f)

" Dispatch seems better than ViMUX, uses tmux splits too
let g:dispatch_no_maps = 1
nnoremap <leader>m :Make<CR>     " runs `makeprg`, opens split, populates qf
nnoremap <leader>M :Make %
nnoremap <leader>n :Dispatch<CR> " runs `let b:dispatch`, opens split, populates qf
"nnoremap <leader>N :let b:dispatch = 'uv run %'
nnoremap <leader>N :Dispatch %
nnoremap <leader>v :Copen\|Dispatch<CR>
" FIXME: leader-v should return to the same Window

" add new ones by creating files in `~/.vim/compilers/{compiler}.vim`
" `:Dispatch {program} [arguments]` will look for {compiler} in file that has:
" `CompilerSet makeprg={program}`
" FIXME: using `:Make`, this is not consulted, making `:Make lint` qf broken
let g:dispatch_compilers = {
    \ 'make test': 'python',
    \ 'make lint': 'flake8',
    \ 'uv run': 'python',
    \ 'tmux': 'tmuxconf',
    \ 'bundle exec': ''}

nnoremap <silent><leader>aw :ArgWrap<CR>

nnoremap <C-w>z :ZoomWinTabToggle<CR>

nnoremap <leader>T :TagbarOpenAutoClose<CR>
"nnoremap <leader>T :TagbarToggle<CR>
let g:tagbar_autofocus = 0
let g:tagbar_sort = 0
let g:tagbar_case_insensitive = 1
let g:tagbar_compact = 1
let g:tagbar_autopreview = 1
let g:tagbar_jump_offset = winheight(0) / 2
let g:tagbar_silent = 1
let g:tagbar_no_status_line = 1
let g:tagbar_foldlevel = 99
nnoremap <leader>] :call tagbar#jumpToNearbyTag(1, 'nearest', 's')<CR>
nnoremap <leader>[ :call tagbar#jumpToNearbyTag(-1, 'nearest', 's')<CR>

" use the the_silver_searcher if possible (much faster than Ack)
if executable('rg')
  let g:ackprg = 'rg --vimgrep --smart-case'
endif
" Ack for the selected text
vnoremap <silent><leader>/ :call VisualSelection('gv', '')<CR>
let g:ack_autoclose = 1
let g:ack_use_cword_for_empty_search = 1
" Don't jump to first match
cnoreabbrev Ack Ack!
" Maps <leader>/ so we're ready to type the search keyword
nnoremap <leader>/ :Ack!<Space>

" FIXME: setup python path per venv using uv automatically (see ycm docs) (or
" Dispatch compiler?)
" FIXME: complete from dictionary
" FIXME: complete for regular text like supertab
" FIXME: ^j ^k move between options, 2nd tab deletes inserted
" let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
    \  'g:ycm_python_interpreter_path',
    \  'g:ycm_python_sys_path'
    \]
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_update_diagnostics_in_insert_mode = 0
let g:ycm_echo_current_diagnostic = 'virtual-text'
nmap <leader>d  :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <leader>D <plug>(YCMHover)
" Enable debugging
" let g:ycm_keep_logfiles = 1
" let g:ycm_log_level = 'debug'


" helpers
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack! '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

def s:GitBlameLine()
    var popup_win = printf("git -C %s blame -s -L %s,%s -- %s | head -c 8", expand('%:h'), line('.'), line('.'), expand('%:p'))
        ->system()
        ->printf("git -C " .. expand('%:h') .. " log --stat -1 %s")
        ->system()
        ->split("\n")
        ->popup_atcursor({ "padding": [0, 1, 1, 1] })
    call setbufvar(winbufnr(popup_win), '&filetype', 'git')
enddef

function AutoSave()
  if (bufname() != "" && &buftype == "" && &filetype != "" && &readonly == 0)
    silent update
  endif
endfunction

let OS=substitute(system('uname -s'),"\n","","")
if (OS == "Darwin")
    " do something that only makes sense on a Mac
endif
